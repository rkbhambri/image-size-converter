{"version":3,"sources":["components/UploadButton/UploadButton.js","components/Images/Image/Image.js","helpers/helpers.js","components/Images/Images.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["UploadButton","props","htmlFor","className","id","type","accept","style","display","onChange","event","compress","Image","key","item","imageUrl","width","height","src","alt","parseData","data","JSON","parse","getItem","localStorage","setItem","value","Images","map","imageIndex","Layout","useState","forceUpdate","dimensions","stringify","target","files","totalDimensions","length","reader","FileReader","readAsDataURL","onload","img","result","i","canvas","document","createElement","getContext","drawImage","items","push","toDataURL","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e7b9382.chunk.js","sourcesContent":["import React from 'react';\n\nconst UploadButton = (props) => {\n    return (\n        <div>\n            <h2>Click on the button below to upload image</h2>\n            <label htmlFor=\"file-input\">\n                <span className=\"upload-button\">Upload Image</span>\n            </label>\n            <input\n                id=\"file-input\"\n                type=\"file\"\n                accept=\"image/*\"\n                style={{ display: 'none' }}\n                onChange={(event) => props.compress(event)} /><br />\n        </div>\n    );\n};\n\nexport default UploadButton;\n","import React from 'react';\n\nconst Image = (props) => {\n    return (\n        <div className=\"image\" key={props.item.imageUrl}>\n            <h3>Image with dimension {props.item.width} x {props.item.height}</h3>\n            <img\n                className=\"image\"\n                src={props.item.imageUrl}\n                alt=\"Rk bhambri\"\n            />\n        </div>\n    );\n};\n\nexport default Image;\n","\nexport const parseData = (data) => {\n    return JSON.parse(data);\n};\n\nexport const getItem = (key) => {\n    return localStorage.getItem(key);\n};\n\nexport const setItem = (key, value) => {\n    return localStorage.setItem(key, value);\n}\n","import React from 'react';\nimport Image from './Image/Image';\nimport { parseData, getItem } from '../../helpers/helpers';\n\nconst Images = (props) => {\n    return (\n        <div className=\"images\">\n            {\n                parseData(getItem('images')).map((item, imageIndex) => {\n                    return (\n                        <Image item={item} key={imageIndex} />\n                    );\n                })\n            }\n        </div>\n    );\n};\n\nexport default Images;\n","import React, { useState } from 'react';\nimport UploadButton from '../UploadButton/UploadButton';\nimport Images from '../Images/Images';\nimport { parseData, getItem, setItem } from '../../helpers/helpers';\n\nconst Layout = (props) => {\n\n    const [, forceUpdate] = useState();\n    const [dimensions] = useState([\n        {\n            width: '755',\n            height: '450'\n        },\n        {\n            width: '365',\n            height: '450'\n        },\n        {\n            width: '365',\n            height: '212'\n        },\n        {\n            width: '380',\n            height: '380'\n        }\n    ]);\n\n    const compress = (event) => {\n        if (event.target.files[0]) {\n            const totalDimensions = dimensions.length;\n            const reader = new FileReader();\n            reader.readAsDataURL(event.target.files[0]);\n            reader.onload = event => {\n                const img = new Image();\n                img.src = event.target.result;\n                img.onload = function () {\n                    if (img.width === 1024 && img.height === 1024) {\n                        for (let i = 0; i < totalDimensions; i++) {\n                            const canvas = document.createElement('canvas');\n                            canvas.width = dimensions[i].width;\n                            canvas.height = dimensions[i].height;\n                            const ctx = canvas.getContext('2d');\n                            // img.width and img.height will contain the original dimensions\n                            ctx.drawImage(img, 0, 0, dimensions[i].width, dimensions[i].height, 0, 0, 1024, 1024);\n                            let items = parseData(getItem('images'));\n                            items.push({\n                                height: dimensions[i].height,\n                                width: dimensions[i].width,\n                                imageUrl: canvas.toDataURL()\n                            });\n                            setItem('images', JSON.stringify(items))\n                            forceUpdate(canvas.toDataURL());\n                        }\n                    } else {\n                        alert('Please upload the image of dimension 1024 x 1024');\n                    }\n                    return img.onload;\n                    // reader.onerror = error => console.log(error);\n                };\n            }\n        }\n    };\n\n    if (!getItem('images')) {\n        setItem('images', JSON.stringify([]));\n    }\n\n    return (\n        <div className=\"app\">\n            <UploadButton compress={(event) => compress(event)} />\n            {parseData(getItem('images')).length > 0 && <Images />}\n        </div>\n    );\n};\n\nexport default Layout;\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\n\nconst App = (props) => {\n    return (\n        <Layout />\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}